name: Create Dummy Repositories with Branches

on:
  workflow_dispatch:  # Allows manual trigger

jobs:
  create_repos:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Git & jq
        run: sudo apt-get update && sudo apt-get install -y jq git

      - name: Create 50 Dummy Repositories
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          ORG_NAME: "lalitsudhakar"  # Change if using an organization
        run: |
          # Define branch names
          BRANCHES=("Test-Github" "Docker-Dev" "Prod" "Stage")

          for i in $(seq 1 50); do
            BRANCH_INDEX=$(( (i - 1) % 4 ))  # Rotate through 4 branches
            BRANCH_NAME=${BRANCHES[$BRANCH_INDEX]}
            REPO_NAME="dummy-repo-$BRANCH_NAME"

            echo "Creating repository: $REPO_NAME"

            # Create repository
            RESPONSE=$(curl -s -X POST -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/user/repos \
              -d "{\"name\":\"$REPO_NAME\", \"private\":true}")

            # Check if repo creation was successful
            if echo "$RESPONSE" | jq -e 'has("id")' > /dev/null; then
              echo "Repository $REPO_NAME created successfully."
            else
              echo "Error creating repository: $RESPONSE"
              exit 1
            fi

            sleep 2  # Prevent rate limiting

            # Clone the new repository
            git clone "https://$GH_TOKEN@github.com/$ORG_NAME/$REPO_NAME.git"
            cd $REPO_NAME

            # Set Git config to prevent commit errors
            git config --global user.email "actions@github.com"
            git config --global user.name "GitHub Actions"

            # Create the assigned branch and push sample code
            git checkout --orphan $BRANCH_NAME
            echo "print('Hello from $BRANCH_NAME branch')" > sample.py
            git add sample.py
            git commit -m "Added sample code to $BRANCH_NAME"
            git push origin $BRANCH_NAME

            cd ..
            rm -rf $REPO_NAME  # Cleanup local repo
          done
