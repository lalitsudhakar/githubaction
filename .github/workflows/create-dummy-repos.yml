name: Create Dummy Repositories

on:
  workflow_dispatch:  # Allows manual trigger from GitHub Actions

jobs:
  create_repos:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure Git User
        run: |
          git config --global user.email "your-email@example.com"
          git config --global user.name "GitHub Actions Bot"

      - name: Create 50 Dummy Repositories
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          ORG_NAME: ${{ secrets.ORG_NAME }}  # GitHub username or organization
        run: |
          for i in $(seq 1 50); do
            REPO_NAME="dummy-repo"  # Fixed repo name
            echo "Processing repository: $REPO_NAME"

            # Check if repository already exists
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$ORG_NAME/$REPO_NAME)

            if [ "$RESPONSE" -eq 200 ]; then
              echo "Repository $REPO_NAME already exists. Deleting..."
              curl -X DELETE -H "Authorization: token $GH_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/$ORG_NAME/$REPO_NAME
              sleep 5  # Wait before recreating
            fi

            echo "Creating repository: $REPO_NAME"
            curl -X POST -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/orgs/$ORG_NAME/repos \
              -d '{"name":"'"$REPO_NAME"'", "private":true}'

            sleep 5  # Prevent rate limiting

            # Clone and initialize the repository
            git clone "https://$GH_TOKEN@github.com/$ORG_NAME/$REPO_NAME.git"
            cd $REPO_NAME

            # Create branches and add sample code
            for BRANCH in Test-Github Docker-Dev Prod Stage; do
              git checkout -b $BRANCH
              echo "print('Hello from $BRANCH branch')" > sample.py
              git add sample.py
              git commit -m "Added sample code to $BRANCH branch"
              git push origin $BRANCH
            done

            cd ..
            rm -rf $REPO_NAME  # Cleanup local copy
          done
